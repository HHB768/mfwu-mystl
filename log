
------- Test: use_malloc_allocator -------
In malloc_alloc
allocating 0
deallocating 0
setting dummy oom_handler
allocating 1024^3
reallocating 1.5*1024^3
deallocating 1.5*1024^3
allocating and deallocating 10 times
allocating 1000 times
setting invalid oom_handler
oom malloc failure testing: 

------- Test: use_default_allocator -------
In default_alloc
malloc_allocating large block
malloc_deallocating large block
allocating and deallocating random units
end of random tests

----------- Alloc test result -----------
Pass/Total: 2/2



------- Test: use_list_iterator -------
printing list nodes with node*
doing some list operations
modifying and printing list nodes with iterator

------- Test: use_input_iterator -------
testing input_iterator reading
reading complete

------- Test: use_output_iterator -------
testing output_iterator writing

------- Test: use_forward_iterator -------
testing forward_iterator writing

------- Test: use_bidirectional_iterator -------
testing bidirectional_iterator moving and writing

------- Test: use_random_access_iterator -------
testing random_access_iterator moving and writing

---------- Iterator test result -----------
Pass/Total: 6/6



------- Test: use construct destroy -------
constructing pod data
destroying pod data
constructing non-pod data
destroying non-pod data
constructing pod data with iterator
destroying pod data with iterator
constructing non-pod data with iterator
destroying non-pod data with iterator

------- Test: use uninitialized operations -------
filling pod data with iterator
filling non-pod data with iterator
filling pod data n times
filling non-pod data n times
copying pod data with iterator
copying non-pod data with iterator

------- Test: use uninitialized operations -------
testing distance of iterator
testing advance of iterator

---------- Utils test result -----------
Pass/Total: 3/3



------- Test: use vector_iterator -------
moving and derefering iterator
0 : 1  2 : 3  4 : 5  

------- Test: use mfwu::vector -------
constructing pod data
&vec.begin() = 0, vec.size() = 0, vec.capacity() = 0
&vec.begin() = 0x5b674734d2e0, vec.size() = 1, vec.capacity() = 1
&vec.begin() = 0x5b674734d300, vec.size() = 1, vec.capacity() = 1
&vec.begin() = 0x5b674734d300, vec.size() = 1, vec.capacity() = 1
&vec.begin() = 0x5b674734d320, vec.size() = 2, vec.capacity() = 2
&vec.begin() = 0x5b674734d340, vec.size() = 1, vec.capacity() = 1
constructing non-pod data
&vec.begin() = 0, vec.size() = 0, vec.capacity() = 0
&vec.begin() = 0x5b674734d360, vec.size() = 1, vec.capacity() = 1
&vec.begin() = 0x5b674734d380, vec.size() = 1, vec.capacity() = 1
&vec.begin() = 0, vec.size() = 0, vec.capacity() = 0
&vec.begin() = 0x5b674734d3a0, vec.size() = 2, vec.capacity() = 2
&vec.begin() = 0x5b674734d3c0, vec.size() = 1, vec.capacity() = 1
reserving
&vec.begin() = 0x5b674734d3e0, vec.size() = 2, vec.capacity() = 5
{1, 97, 98, 99, 100} {2, 101, 102, 103, 104} 
&vec.begin() = 0x5b674734d3e0, vec.size() = 2, vec.capacity() = 5
{1, 97, 98, 99, 100} {2, 101, 102, 103, 104} 
&vec.begin() = 0x5b674734d320, vec.size() = 2, vec.capacity() = 5
1 2 
&vec.begin() = 0x5b674734d320, vec.size() = 2, vec.capacity() = 5
1 2 
resizing
&vec.begin() = 0x5b674734d3e0, vec.size() = 5, vec.capacity() = 5
{1, 97, 98, 99, 100} {0, 0, 0, 0, 0} {0, 0, 0, 0, 0} {0, 0, 0, 0, 0} {0, 0, 0, 0, 0} 
&vec.begin() = 0x5b674734d3e0, vec.size() = 1, vec.capacity() = 5
{1, 97, 98, 99, 100} 
&vec.begin() = 0x5b674734d320, vec.size() = 5, vec.capacity() = 5
1 0 0 0 0 
&vec.begin() = 0x5b674734d320, vec.size() = 1, vec.capacity() = 5
1 
clearing
&vec.begin() = 0x5b674734d3e0, vec.size() = 0, vec.capacity() = 5
&vec.begin() = 0x5b674734d320, vec.size() = 0, vec.capacity() = 5
emplacing/pushing back
&vec.begin() = 0x5b674734d3a0, vec.size() = 2, vec.capacity() = 2
{0, 0, 0, 0, 0} {2, 97, 99, 101, 115} 
&vec.begin() = 0x5b674734d410, vec.size() = 3, vec.capacity() = 4
{0, 0, 0, 0, 0} {2, 97, 99, 101, 115} {0, 0, 0, 0, 0} 
&vec.begin() = 0x5b674734d410, vec.size() = 4, vec.capacity() = 4
{0, 0, 0, 0, 0} {2, 97, 99, 101, 115} {0, 0, 0, 0, 0} {3, 104, 97, 99, 101} 
&vec.begin() = 0x5b674734d3a0, vec.size() = 2, vec.capacity() = 2
0 2 
&vec.begin() = 0x5b674734d3c0, vec.size() = 3, vec.capacity() = 4
0 2 4 
&vec.begin() = 0x5b674734d3c0, vec.size() = 4, vec.capacity() = 4
0 2 4 3 
poping back
&vec.begin() = 0x5b674734d410, vec